// problem link : https://leetcode.com/problems/number-of-operations-to-make-network-connected/


class Solution {
public:
   
    
    void dfs ( int i , vector<vector<int>>& grp , vector<int> & vis){
        vis.at(i) = 1;
        
        for( auto j : grp[i]){
            if ( !vis[j] )
                dfs(j , grp , vis);
        }
    }
    
    int makeConnected(int n, vector<vector<int>>& connections) {
        if ( connections.size() < n - 1) return -1;
        vector<vector<int>> grp( n ) ;
         vector<int> vis(n , 0);
        for ( int i = 0 ; i < n ; i++)
            grp[i].clear() , vis[i] = 0;
        
        for ( int i = 0 ; i < connections.size() ; i ++){
            int a = connections[i][0];
            int b = connections[i][1];
            
            grp[a].push_back(b);
            grp[b].push_back(a);
        }
        
        int cnt = 0;
        
        for ( int i = 0 ; i < n ; i++){
            if ( !vis.at(i)){
                cnt ++ , dfs(i , grp , vis);
            }
        }
        
        // since the number of componenet that will be return will be c + 1 so we have to substract cnt - 1
        return ( cnt ) ? cnt - 1: -1 ;
    }
};
